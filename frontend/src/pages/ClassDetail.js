import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import API from "../services/api";

const ClassDetail = () => {
  const { id } = useParams();
  const [classInfo, setClassInfo] = useState(null);
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem("token");

  useEffect(() => {
    const fetchClassDetail = async () => {
      try {
        const res = await API.get(`/classes/${id}`);
        setClassInfo(res.data);
      } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      } finally {
        setLoading(false);
      }
    };

    const fetchRequests = async () => {
      try {
        const res = await API.get("/enrollments/messages", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const filtered = res.data.filter(r => r.classId?._id === id || r.classId === id);
        setRequests(filtered);
      } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      }
    };

    fetchClassDetail();
    fetchRequests();
  }, [id, token]);

  const updateField = (field, value) => {
    setClassInfo(prev => ({ ...prev, [field]: value }));
  };

  const handleOpenSession = async () => {
    if (!classInfo.openAt || !classInfo.closeAt) {
      return alert("‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
    }

    try {
      await API.post(
        "/checkin-sessions/open",
        {
          classId: id,
          openAt: classInfo.openAt,
          closeAt: classInfo.closeAt,
          withTeacherFace: classInfo.withTeacherFace || false,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      alert("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (err) {
      console.error("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î session ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      alert("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  const handleApprove = async (reqId) => {
    await API.put(`/enrollments/approve/${reqId}`, {}, {
      headers: { Authorization: `Bearer ${token}` }
    });
    setRequests(prev => prev.filter(r => r._id !== reqId));
  };

  const handleReject = async (reqId) => {
    await API.delete(`/enrollments/${reqId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    setRequests(prev => prev.filter(r => r._id !== reqId));
  };

  if (loading) return <div className="container mt-4">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á...</div>;
  if (!classInfo) return <div className="container mt-4 text-danger">‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</div>;

  return (
    <div className="container mt-4">
      <h3>üìò ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h3>
      <p><strong>‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤:</strong> {classInfo.courseCode}</p>
      <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤:</strong> {classInfo.courseName}</p>
      <p><strong>‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> {classInfo.section}</p>
      <p><strong>‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå:</strong> {classInfo.teacherId?.fullName}</p>

      <hr />
      <h5>üìÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠</h5>
      <div className="row mb-3">
        <div className="col-md-4">
          <input type="datetime-local" className="form-control" value={classInfo.openAt || ""}
            onChange={(e) => updateField("openAt", e.target.value)} />
        </div>
        <div className="col-md-4">
          <input type="datetime-local" className="form-control" value={classInfo.closeAt || ""}
            onChange={(e) => updateField("closeAt", e.target.value)} />
        </div>
        <div className="col-md-2 d-flex align-items-center">
          <input type="checkbox" className="form-check-input me-2"
            checked={classInfo.withTeacherFace || false}
            onChange={(e) => updateField("withTeacherFace", e.target.checked)} />
          <label>‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</label>
        </div>
        <div className="col-md-2">
          <button className="btn btn-primary w-100" onClick={handleOpenSession}>‡πÄ‡∏õ‡∏¥‡∏î</button>
        </div>
      </div>

      <h5>üì© ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h5>
      {requests.length === 0 ? (
        <p className="text-muted">üôÖ‚Äç‚ôÇÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á</p>
      ) : (
        <ul className="list-group mb-4">
          {requests.map((r) => (
            <li key={r._id} className="list-group-item d-flex justify-content-between">
              <span>{r.student?.fullName} ({r.student?.studentId})</span>
              <div>
                <button className="btn btn-success btn-sm me-2" onClick={() => handleApprove(r._id)}>‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
                <button className="btn btn-danger btn-sm" onClick={() => handleReject(r._id)}>‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
              </div>
            </li>
          ))}
        </ul>
      )}

      <h5>üë®‚Äçüéì ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ({classInfo.students?.length || 0} ‡∏Ñ‡∏ô)</h5>
      {classInfo.students?.length === 0 ? (
        <p className="text-muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ</p>
      ) : (
        <ul className="list-group">
          {classInfo.students.map((s) => (
            <li key={s._id} className="list-group-item">
              {s.fullName} ({s.studentId || s.username})
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default ClassDetail;
